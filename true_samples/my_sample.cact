int arr[10] = {10,9,8,7,6,5,4,3,2,1};
int lt[10];
int rt[10];
int n = 10;

void copy(bool tar_is_lt,int offset,int len){
  int i=0;
  int tmp;
  if(tar_is_lt){
    while(i<len){
      tmp = offset + i;
      lt[i] = arr[tmp];
      i = i+1;
    }
    return;
  }else{
    while(i<len){
      tmp = offset + i;
      rt[i] = arr[tmp];
      i = i+1;
    }
    return;
  }
}

void swap(int offset){
  int tmp,idx;
  idx = offset+1;

  tmp = arr[offset];
  arr[offset] = arr[idx];
  arr[idx] = tmp;
  return;
}

void merge(int offset,int len){
  int lt_len,rt_len;
  lt_len = len/2;
  rt_len = (len+1)/2;
  copy(true,  offset,       lt_len);
  copy(false, offset+lt_len,rt_len);
  
  int i,lt_idx,rt_idx,cur;
  i=0;
  lt_idx = 0;
  rt_idx = 0;
  cur = offset;
  while(i<n && lt_idx<lt_len && rt_idx<rt_len){
    if(lt[lt_idx]<rt[rt_idx])
      arr[cur]=lt[lt_idx];
    else
      arr[cur]=rt[rt_idx];
    cur = cur+1;
    i = i+1;
  }

  if(lt_idx==lt_len){
    while(rt_idx<rt_len){
      arr[cur]=rt[rt_idx];
      cur = cur+1;
    }
  }
  if(rt_idx==rt_len){
    while(lt_idx<lt_len){
      arr[cur]=lt[lt_idx];
      cur = cur+1;
    }
  }
  return;
}

void mergeSort(int offset,int len){
  if(len==1){
    return;
  }else if(len==2){
    int idx;
    idx = offset+1;
    if(arr[offset]>arr[idx])
      swap(offset);
    return;
  }
  mergeSort(offset      ,len/2);
  mergeSort(offset+len/2,(len+1)/2);
  merge(offset,len);
  return;
}

int main(){
  mergeSort(0,n);
  int i;
  i=0;
  while(i<n){
    print_int(arr[i]);
    i=i+1;
  }
  return 0;
}